// Generated from: tests/features/api-integration.feature
import { test } from "playwright-bdd";

test.describe('Backend API Integration', () => {

  test.beforeEach('Background', async ({ Given, page }) => {
    await Given('the backend API is running on "http://localhost:8000"', null, { page }); 
  });
  
  test('Health check endpoint responds correctly', async ({ When, page, Then, And }) => { 
    await When('I make a GET request to "/health"', null, { page }); 
    await Then('the response status should be 200', null, { page }); 
    await And('the response should contain "healthy"', null, { page }); 
    await And('the response should contain "ariel-backend"', null, { page }); 
  });

  test('Voice listing API works correctly', async ({ When, page, Then, And }) => { 
    await When('I make a GET request to "/voices"', null, { page }); 
    await Then('the response status should be 200', null, { page }); 
    await And('the response should contain "voices"', null, { page }); 
    await And('the response should contain at least 100 voices', null, { page }); 
  });

  test('Text analysis API processes simple text', async ({ Given, page, When, Then, And }) => { 
    await Given('I have a text file with content "Hello world! This is a test."', null, { page }); 
    await When('I upload the file to "/analyze"', null, { page }); 
    await Then('the response status should be 200', null, { page }); 
    await And('the response should contain "characters"', null, { page }); 
    await And('the response should contain "segments"', null, { page }); 
    await And('the response should contain "input_length"', null, { page }); 
    await And('the characters array should contain a "narrator"', null, { page }); 
  });

  test('Text analysis API processes dialogue correctly', async ({ Given, page, When, Then, And }) => { 
    await Given('I have a text file with content "The story begins. \\"Hello!\\" said Alice. \\"Goodbye!\\" replied Bob."', null, { page }); 
    await When('I upload the file to "/analyze"', null, { page }); 
    await Then('the response status should be 200', null, { page }); 
    await And('the characters array should contain a "narrator"', null, { page }); 
    await And('the characters array should contain a "character"', null, { page }); 
    await And('the character should have sample dialogue "Hello!"', null, { page }); 
  });

  test('Audio generation API creates valid audio files', async ({ Given, page, When, Then, And }) => { 
    await Given('I have a text file with content "Short test for audio generation."', null, { page }); 
    await When('I upload the file to "/generate"', null, { page }); 
    await Then('the response status should be 200', null, { page }); 
    await And('the response should be a valid audio file', null, { page }); 
    await And('the audio file should be larger than 1000 bytes', null, { page }); 
  });

  test('API handles invalid file types gracefully', async ({ Given, page, When, Then, And }) => { 
    await Given('I have a PDF file', null, { page }); 
    await When('I upload the file to "/analyze"', null, { page }); 
    await Then('the response status should be 400', null, { page }); 
    await And('the response should contain "Only .txt files are supported"', null, { page }); 
  });

  test('API handles empty requests gracefully', async ({ When, page, Then, And }) => { 
    await When('I make a POST request to "/analyze" without a file', null, { page }); 
    await Then('the response status should be 422', null, { page }); 
    await And('the response should contain error information', null, { page }); 
  });

  test('Voice filtering works correctly', async ({ When, page, Then, And }) => { 
    await When('I make a GET request to "/voices"', null, { page }); 
    await Then('the response should contain English voices', null, { page }); 
    await And('the response should contain voices with different genders', null, { page }); 
    await And('each voice should have required fields "id", "name", "gender", "locale"', null, { page }); 
  });

});

// == technical section ==

test.use({
  $test: ({}, use) => use(test),
  $uri: ({}, use) => use('tests/features/api-integration.feature'),
  $bddFileData: ({}, use) => use(bddFileData),
});

const bddFileData = [ // bdd-data-start
  {"pwTestLine":10,"pickleLine":9,"tags":[],"steps":[{"pwStepLine":7,"gherkinStepLine":7,"keywordType":"Context","textWithKeyword":"Given the backend API is running on \"http://localhost:8000\"","isBg":true,"stepMatchArguments":[{"group":{"start":30,"value":"\"http://localhost:8000\"","children":[{"start":31,"value":"http://localhost:8000","children":[{"children":[]}]},{"children":[{"children":[]}]}]},"parameterTypeName":"string"}]},{"pwStepLine":11,"gherkinStepLine":10,"keywordType":"Action","textWithKeyword":"When I make a GET request to \"/health\"","stepMatchArguments":[{"group":{"start":24,"value":"\"/health\"","children":[{"start":25,"value":"/health","children":[{"children":[]}]},{"children":[{"children":[]}]}]},"parameterTypeName":"string"}]},{"pwStepLine":12,"gherkinStepLine":11,"keywordType":"Outcome","textWithKeyword":"Then the response status should be 200","stepMatchArguments":[{"group":{"start":30,"value":"200","children":[]},"parameterTypeName":"int"}]},{"pwStepLine":13,"gherkinStepLine":12,"keywordType":"Outcome","textWithKeyword":"And the response should contain \"healthy\"","stepMatchArguments":[{"group":{"start":28,"value":"\"healthy\"","children":[{"start":29,"value":"healthy","children":[{"children":[]}]},{"children":[{"children":[]}]}]},"parameterTypeName":"string"}]},{"pwStepLine":14,"gherkinStepLine":13,"keywordType":"Outcome","textWithKeyword":"And the response should contain \"ariel-backend\"","stepMatchArguments":[{"group":{"start":28,"value":"\"ariel-backend\"","children":[{"start":29,"value":"ariel-backend","children":[{"children":[]}]},{"children":[{"children":[]}]}]},"parameterTypeName":"string"}]}]},
  {"pwTestLine":17,"pickleLine":15,"tags":[],"steps":[{"pwStepLine":7,"gherkinStepLine":7,"keywordType":"Context","textWithKeyword":"Given the backend API is running on \"http://localhost:8000\"","isBg":true,"stepMatchArguments":[{"group":{"start":30,"value":"\"http://localhost:8000\"","children":[{"start":31,"value":"http://localhost:8000","children":[{"children":[]}]},{"children":[{"children":[]}]}]},"parameterTypeName":"string"}]},{"pwStepLine":18,"gherkinStepLine":16,"keywordType":"Action","textWithKeyword":"When I make a GET request to \"/voices\"","stepMatchArguments":[{"group":{"start":24,"value":"\"/voices\"","children":[{"start":25,"value":"/voices","children":[{"children":[]}]},{"children":[{"children":[]}]}]},"parameterTypeName":"string"}]},{"pwStepLine":19,"gherkinStepLine":17,"keywordType":"Outcome","textWithKeyword":"Then the response status should be 200","stepMatchArguments":[{"group":{"start":30,"value":"200","children":[]},"parameterTypeName":"int"}]},{"pwStepLine":20,"gherkinStepLine":18,"keywordType":"Outcome","textWithKeyword":"And the response should contain \"voices\"","stepMatchArguments":[{"group":{"start":28,"value":"\"voices\"","children":[{"start":29,"value":"voices","children":[{"children":[]}]},{"children":[{"children":[]}]}]},"parameterTypeName":"string"}]},{"pwStepLine":21,"gherkinStepLine":19,"keywordType":"Outcome","textWithKeyword":"And the response should contain at least 100 voices","stepMatchArguments":[{"group":{"start":37,"value":"100","children":[]},"parameterTypeName":"int"}]}]},
  {"pwTestLine":24,"pickleLine":21,"tags":[],"steps":[{"pwStepLine":7,"gherkinStepLine":7,"keywordType":"Context","textWithKeyword":"Given the backend API is running on \"http://localhost:8000\"","isBg":true,"stepMatchArguments":[{"group":{"start":30,"value":"\"http://localhost:8000\"","children":[{"start":31,"value":"http://localhost:8000","children":[{"children":[]}]},{"children":[{"children":[]}]}]},"parameterTypeName":"string"}]},{"pwStepLine":25,"gherkinStepLine":22,"keywordType":"Context","textWithKeyword":"Given I have a text file with content \"Hello world! This is a test.\"","stepMatchArguments":[{"group":{"start":32,"value":"\"Hello world! This is a test.\"","children":[{"start":33,"value":"Hello world! This is a test.","children":[{"children":[]}]},{"children":[{"children":[]}]}]},"parameterTypeName":"string"}]},{"pwStepLine":26,"gherkinStepLine":23,"keywordType":"Action","textWithKeyword":"When I upload the file to \"/analyze\"","stepMatchArguments":[{"group":{"start":21,"value":"\"/analyze\"","children":[{"start":22,"value":"/analyze","children":[{"children":[]}]},{"children":[{"children":[]}]}]},"parameterTypeName":"string"}]},{"pwStepLine":27,"gherkinStepLine":24,"keywordType":"Outcome","textWithKeyword":"Then the response status should be 200","stepMatchArguments":[{"group":{"start":30,"value":"200","children":[]},"parameterTypeName":"int"}]},{"pwStepLine":28,"gherkinStepLine":25,"keywordType":"Outcome","textWithKeyword":"And the response should contain \"characters\"","stepMatchArguments":[{"group":{"start":28,"value":"\"characters\"","children":[{"start":29,"value":"characters","children":[{"children":[]}]},{"children":[{"children":[]}]}]},"parameterTypeName":"string"}]},{"pwStepLine":29,"gherkinStepLine":26,"keywordType":"Outcome","textWithKeyword":"And the response should contain \"segments\"","stepMatchArguments":[{"group":{"start":28,"value":"\"segments\"","children":[{"start":29,"value":"segments","children":[{"children":[]}]},{"children":[{"children":[]}]}]},"parameterTypeName":"string"}]},{"pwStepLine":30,"gherkinStepLine":27,"keywordType":"Outcome","textWithKeyword":"And the response should contain \"input_length\"","stepMatchArguments":[{"group":{"start":28,"value":"\"input_length\"","children":[{"start":29,"value":"input_length","children":[{"children":[]}]},{"children":[{"children":[]}]}]},"parameterTypeName":"string"}]},{"pwStepLine":31,"gherkinStepLine":28,"keywordType":"Outcome","textWithKeyword":"And the characters array should contain a \"narrator\"","stepMatchArguments":[{"group":{"start":38,"value":"\"narrator\"","children":[{"start":39,"value":"narrator","children":[{"children":[]}]},{"children":[{"children":[]}]}]},"parameterTypeName":"string"}]}]},
  {"pwTestLine":34,"pickleLine":30,"tags":[],"steps":[{"pwStepLine":7,"gherkinStepLine":7,"keywordType":"Context","textWithKeyword":"Given the backend API is running on \"http://localhost:8000\"","isBg":true,"stepMatchArguments":[{"group":{"start":30,"value":"\"http://localhost:8000\"","children":[{"start":31,"value":"http://localhost:8000","children":[{"children":[]}]},{"children":[{"children":[]}]}]},"parameterTypeName":"string"}]},{"pwStepLine":35,"gherkinStepLine":31,"keywordType":"Context","textWithKeyword":"Given I have a text file with content \"The story begins. \\\"Hello!\\\" said Alice. \\\"Goodbye!\\\" replied Bob.\"","stepMatchArguments":[{"group":{"start":32,"value":"\"The story begins. \\\"Hello!\\\" said Alice. \\\"Goodbye!\\\" replied Bob.\"","children":[{"start":33,"value":"The story begins. \\\"Hello!\\\" said Alice. \\\"Goodbye!\\\" replied Bob.","children":[{"start":51,"value":"\\\" replied Bob.","children":[]}]},{"children":[{"children":[]}]}]},"parameterTypeName":"string"}]},{"pwStepLine":36,"gherkinStepLine":32,"keywordType":"Action","textWithKeyword":"When I upload the file to \"/analyze\"","stepMatchArguments":[{"group":{"start":21,"value":"\"/analyze\"","children":[{"start":22,"value":"/analyze","children":[{"children":[]}]},{"children":[{"children":[]}]}]},"parameterTypeName":"string"}]},{"pwStepLine":37,"gherkinStepLine":33,"keywordType":"Outcome","textWithKeyword":"Then the response status should be 200","stepMatchArguments":[{"group":{"start":30,"value":"200","children":[]},"parameterTypeName":"int"}]},{"pwStepLine":38,"gherkinStepLine":34,"keywordType":"Outcome","textWithKeyword":"And the characters array should contain a \"narrator\"","stepMatchArguments":[{"group":{"start":38,"value":"\"narrator\"","children":[{"start":39,"value":"narrator","children":[{"children":[]}]},{"children":[{"children":[]}]}]},"parameterTypeName":"string"}]},{"pwStepLine":39,"gherkinStepLine":35,"keywordType":"Outcome","textWithKeyword":"And the characters array should contain a \"character\"","stepMatchArguments":[{"group":{"start":38,"value":"\"character\"","children":[{"start":39,"value":"character","children":[{"children":[]}]},{"children":[{"children":[]}]}]},"parameterTypeName":"string"}]},{"pwStepLine":40,"gherkinStepLine":36,"keywordType":"Outcome","textWithKeyword":"And the character should have sample dialogue \"Hello!\"","stepMatchArguments":[{"group":{"start":42,"value":"\"Hello!\"","children":[{"start":43,"value":"Hello!","children":[{"children":[]}]},{"children":[{"children":[]}]}]},"parameterTypeName":"string"}]}]},
  {"pwTestLine":43,"pickleLine":38,"tags":[],"steps":[{"pwStepLine":7,"gherkinStepLine":7,"keywordType":"Context","textWithKeyword":"Given the backend API is running on \"http://localhost:8000\"","isBg":true,"stepMatchArguments":[{"group":{"start":30,"value":"\"http://localhost:8000\"","children":[{"start":31,"value":"http://localhost:8000","children":[{"children":[]}]},{"children":[{"children":[]}]}]},"parameterTypeName":"string"}]},{"pwStepLine":44,"gherkinStepLine":39,"keywordType":"Context","textWithKeyword":"Given I have a text file with content \"Short test for audio generation.\"","stepMatchArguments":[{"group":{"start":32,"value":"\"Short test for audio generation.\"","children":[{"start":33,"value":"Short test for audio generation.","children":[{"children":[]}]},{"children":[{"children":[]}]}]},"parameterTypeName":"string"}]},{"pwStepLine":45,"gherkinStepLine":40,"keywordType":"Action","textWithKeyword":"When I upload the file to \"/generate\"","stepMatchArguments":[{"group":{"start":21,"value":"\"/generate\"","children":[{"start":22,"value":"/generate","children":[{"children":[]}]},{"children":[{"children":[]}]}]},"parameterTypeName":"string"}]},{"pwStepLine":46,"gherkinStepLine":41,"keywordType":"Outcome","textWithKeyword":"Then the response status should be 200","stepMatchArguments":[{"group":{"start":30,"value":"200","children":[]},"parameterTypeName":"int"}]},{"pwStepLine":47,"gherkinStepLine":42,"keywordType":"Outcome","textWithKeyword":"And the response should be a valid audio file","stepMatchArguments":[]},{"pwStepLine":48,"gherkinStepLine":43,"keywordType":"Outcome","textWithKeyword":"And the audio file should be larger than 1000 bytes","stepMatchArguments":[{"group":{"start":37,"value":"1000","children":[]},"parameterTypeName":"int"}]}]},
  {"pwTestLine":51,"pickleLine":45,"tags":[],"steps":[{"pwStepLine":7,"gherkinStepLine":7,"keywordType":"Context","textWithKeyword":"Given the backend API is running on \"http://localhost:8000\"","isBg":true,"stepMatchArguments":[{"group":{"start":30,"value":"\"http://localhost:8000\"","children":[{"start":31,"value":"http://localhost:8000","children":[{"children":[]}]},{"children":[{"children":[]}]}]},"parameterTypeName":"string"}]},{"pwStepLine":52,"gherkinStepLine":46,"keywordType":"Context","textWithKeyword":"Given I have a PDF file","stepMatchArguments":[]},{"pwStepLine":53,"gherkinStepLine":47,"keywordType":"Action","textWithKeyword":"When I upload the file to \"/analyze\"","stepMatchArguments":[{"group":{"start":21,"value":"\"/analyze\"","children":[{"start":22,"value":"/analyze","children":[{"children":[]}]},{"children":[{"children":[]}]}]},"parameterTypeName":"string"}]},{"pwStepLine":54,"gherkinStepLine":48,"keywordType":"Outcome","textWithKeyword":"Then the response status should be 400","stepMatchArguments":[{"group":{"start":30,"value":"400","children":[]},"parameterTypeName":"int"}]},{"pwStepLine":55,"gherkinStepLine":49,"keywordType":"Outcome","textWithKeyword":"And the response should contain \"Only .txt files are supported\"","stepMatchArguments":[{"group":{"start":28,"value":"\"Only .txt files are supported\"","children":[{"start":29,"value":"Only .txt files are supported","children":[{"children":[]}]},{"children":[{"children":[]}]}]},"parameterTypeName":"string"}]}]},
  {"pwTestLine":58,"pickleLine":51,"tags":[],"steps":[{"pwStepLine":7,"gherkinStepLine":7,"keywordType":"Context","textWithKeyword":"Given the backend API is running on \"http://localhost:8000\"","isBg":true,"stepMatchArguments":[{"group":{"start":30,"value":"\"http://localhost:8000\"","children":[{"start":31,"value":"http://localhost:8000","children":[{"children":[]}]},{"children":[{"children":[]}]}]},"parameterTypeName":"string"}]},{"pwStepLine":59,"gherkinStepLine":52,"keywordType":"Action","textWithKeyword":"When I make a POST request to \"/analyze\" without a file","stepMatchArguments":[{"group":{"start":25,"value":"\"/analyze\"","children":[{"start":26,"value":"/analyze","children":[{"children":[]}]},{"children":[{"children":[]}]}]},"parameterTypeName":"string"}]},{"pwStepLine":60,"gherkinStepLine":53,"keywordType":"Outcome","textWithKeyword":"Then the response status should be 422","stepMatchArguments":[{"group":{"start":30,"value":"422","children":[]},"parameterTypeName":"int"}]},{"pwStepLine":61,"gherkinStepLine":54,"keywordType":"Outcome","textWithKeyword":"And the response should contain error information","stepMatchArguments":[]}]},
  {"pwTestLine":64,"pickleLine":56,"tags":[],"steps":[{"pwStepLine":7,"gherkinStepLine":7,"keywordType":"Context","textWithKeyword":"Given the backend API is running on \"http://localhost:8000\"","isBg":true,"stepMatchArguments":[{"group":{"start":30,"value":"\"http://localhost:8000\"","children":[{"start":31,"value":"http://localhost:8000","children":[{"children":[]}]},{"children":[{"children":[]}]}]},"parameterTypeName":"string"}]},{"pwStepLine":65,"gherkinStepLine":57,"keywordType":"Action","textWithKeyword":"When I make a GET request to \"/voices\"","stepMatchArguments":[{"group":{"start":24,"value":"\"/voices\"","children":[{"start":25,"value":"/voices","children":[{"children":[]}]},{"children":[{"children":[]}]}]},"parameterTypeName":"string"}]},{"pwStepLine":66,"gherkinStepLine":58,"keywordType":"Outcome","textWithKeyword":"Then the response should contain English voices","stepMatchArguments":[]},{"pwStepLine":67,"gherkinStepLine":59,"keywordType":"Outcome","textWithKeyword":"And the response should contain voices with different genders","stepMatchArguments":[]},{"pwStepLine":68,"gherkinStepLine":60,"keywordType":"Outcome","textWithKeyword":"And each voice should have required fields \"id\", \"name\", \"gender\", \"locale\"","stepMatchArguments":[{"group":{"start":39,"value":"\"id\"","children":[{"start":40,"value":"id","children":[{"children":[]}]},{"children":[{"children":[]}]}]},"parameterTypeName":"string"},{"group":{"start":45,"value":"\"name\"","children":[{"start":46,"value":"name","children":[{"children":[]}]},{"children":[{"children":[]}]}]},"parameterTypeName":"string"},{"group":{"start":53,"value":"\"gender\"","children":[{"start":54,"value":"gender","children":[{"children":[]}]},{"children":[{"children":[]}]}]},"parameterTypeName":"string"},{"group":{"start":63,"value":"\"locale\"","children":[{"start":64,"value":"locale","children":[{"children":[]}]},{"children":[{"children":[]}]}]},"parameterTypeName":"string"}]}]},
]; // bdd-data-end